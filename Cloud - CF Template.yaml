AWSTemplateFormatVersion: 2010-09-09

Description: Tech Challenge #1 - 20190715



Parameters:
  MyName:
    Type: String
    Description: Name of the Challenger

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:BatchWriteItem'
                Resource: !GetAtt
                  - DynamoTable
                  - Arn
                Effect: Allow

  LambdaPublisherRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - 'arn:aws:logs:*:*:*'
                Effect: Allow
              - Action:
                  - 'dynamodb:DescribeStream'
                  - 'dynamodb:GetRecords'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:ListStreams'
                Resource: !GetAtt DynamoTable.StreamArn
                Effect: Allow
              - Action:
                  - sns:Publish
                Resource:
                  - "*"
                Effect: Allow

  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub Challenge_${MyName}
      AttributeDefinitions:
        - AttributeName: team
          AttributeType: S
      KeySchema:
        - AttributeName: team
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  
  DynamoDBTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn: !GetAtt DynamoTable.StreamArn
      FunctionName: !GetAtt LambdaPublisher.Arn
      # Always start at the tail of the Stream
      StartingPosition: LATEST

  LambdaExecution:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3

          def dynamo_itemcreate(team_name, team_country, team_desc, team_rating):
              dynamodb = boto3.client('dynamodb')
              db_name = "Challenge_DB"
              dynamodb.put_item(TableName=db_name, Item={'country':{'S':team_country}, 'team':{'S':team_name}, 'desc':{'S':team_desc}, 'rating':{'S':team_rating}})

          def lambda_handler(event, context):
              print('Team Country: %s' % event['team_country'])
              print('Team Name: %s' % event['team_name'])
              print('Team Description: %s' % event['team_desc'])
              print('Team Rating: %s' % event['team_rating'])
              dynamo_itemcreate(event['team_name'], event['team_country'], event['team_desc'],event['team_rating'])
      Description: API Gateway TechChallenge
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 5

  LambdaPublisher:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          var AWS = require("aws-sdk");
          var sns = new AWS.SNS();

          exports.handler = (event, context, callback) => {

              event.Records.forEach((record) => {
                  console.log('Stream record: ', JSON.stringify(record, null, 2));

                  if (record.eventName == 'INSERT') {
                      var who = JSON.stringify(record.dynamodb.NewImage.team_name.S);
                      var from = JSON.stringify(record.dynamodb.NewImage.team_country.S);
                      var what = JSON.stringify(record.dynamodb.NewImage.team_desc.S);
                      var rating = JSON.stringify(record.dynamodb.NewImage.team_rating.S);
                      var params = {
                          Subject: 'A new entry for ' + who,
                          Message: 'the team is ' + who + ' they are  ' + from + ':\n\n ' + what + their rating is + rating,
                          TopicArn: process.env.SNS_TOPIC_ARN
                      };
                      sns.publish(params, function(err, data) {
                          if (err) {
                              console.error("Unable to send message. Error JSON:", JSON.stringify(err, null, 2));
                          } else {
                              console.log("Results from sending message: ", JSON.stringify(data, null, 2));
                          }
                      });
                  }
              });
              callback(null, `Successfully processed ${event.Records.length} records.`);
          };   
      Description: API Gateway TechChallenge
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaPublisherRole.Arn
      Runtime: python3.7
      Timeout: 5
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SampleSNSTopic

  LambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - ''
        - - '/aws/lambda/'
          -  !Ref LambdaPublisher
      RetentionInDays: 14

  SampleSNSTopic:
    Type: 'AWS::SNS::Topic'

  Subscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Endpoint: !GetAtt
        - LambdaPublisher
        - Arn
      Protocol: lambda
      TopicArn: !Ref SampleSNSTopic

  APIPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:'
      FunctionName:
        'Fn::GetAtt':
          - LambdaExecution
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        'Fn::Join':
          - ''
          - - 'arn:aws:execute-api:'
            - Ref: 'AWS::Region'
            - ':'
            - Ref: 'AWS::AccountId'
            - ':'
            - Ref: ApiRestApi
            - /*

  ApiRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub RestTechChallenge1_${MyName}
      EndpointConfiguration:
        Types: 
          - REGIONAL

  ApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt 
        - ApiRestApi
        - RootResourceId
      RestApiId: !Ref ApiRestApi
      PathPart: 'add_new'

  ApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiRestApi
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - LambdaExecution
              - Arn
            - /invocations
        IntegrationResponses:
          - ResponseTemplates:
              application/json: '{}'
            ResponseParameters:
              method.response.header.Location: integration.response.body.headers.uid
            StatusCode: 201
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{ "team_name": $input.json(''team_name''), "team_country": $input.json(''team_country''), "team_desc": $input.json(''team_desc''), "team_rating": $input.json(''team_rating'')}'
      RequestModels:
        application/json: !Ref ApiModel
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Location: true
          StatusCode: 201

  ApiModel:
    Type: 'AWS::ApiGateway::Model'
    Properties:
      ContentType: application/json
      Name: Team
      RestApiId: !Ref ApiRestApi
      Schema:
        title: Team
        type: object
        properties: 
          team_country:
            type: string
          team_name:
            type: string
          team_desc:
            type: string
          team_rating: 
            type: string

  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ApiRestApi
      StageName: v1
    DependsOn:
      - ApiMethod
      - ApiModel
      - ApiRestApi
      - APIPermission

Outputs:
  RootUrl:
    Description: Root URL of the API gateway
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref ApiRestApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .amazonaws.com/